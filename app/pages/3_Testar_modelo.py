import streamlit as st
import pandas as pd
import io
import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from config.config import set_page_config

set_page_config()

# Reimplementar as fun√ß√µes necess√°rias aqui em vez de importar
def initialize_model_history():
    """
    Inicializa o hist√≥rico de modelos no session_state se n√£o existir
    """
    if 'model_history' not in st.session_state:
        st.session_state['model_history'] = []

def display_model_history():
    """
    Exibe o hist√≥rico de modelos treinados em formato de tabela
    """
    # Garante que o hist√≥rico est√° inicializado
    initialize_model_history()
    
    # Verifica se h√° modelos no hist√≥rico
    if len(st.session_state['model_history']) == 0:
        st.info("Nenhum modelo foi treinado ainda. Treine um modelo para ver o hist√≥rico.")
        return
    
    # Convertendo hist√≥rico para DataFrame para melhor visualiza√ß√£o
    df_history = pd.DataFrame(st.session_state['model_history'])
    
    # Reorganizando colunas para melhor visualiza√ß√£o
    df_display = df_history[['timestamp', 'model_name', 'roc_auc_train', 'roc_auc_test', 
                           'ks_train', 'ks_test', 'features_count']].copy()
    
    # Renomeando colunas para melhor apresenta√ß√£o
    df_display.columns = ['Data/Hora', 'Modelo', 'ROC AUC (Treino)', 'ROC AUC (Teste)', 
                         'KS (Treino)', 'KS (Teste)', 'Qtd Features']
    
    # Formatando valores num√©ricos para melhor legibilidade
    for col in ['ROC AUC (Treino)', 'ROC AUC (Teste)']:
        df_display[col] = df_display[col].round(4)
    
    for col in ['KS (Treino)', 'KS (Teste)']:
        df_display[col] = df_display[col].round(2)
    
    # Exibe a tabela de hist√≥rico
    st.write("### üìä Hist√≥rico de Modelos Treinados")
    st.dataframe(df_display, use_container_width=True)

def to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Sheet1')
        writer.close()
    processed_data = output.getvalue()
    return processed_data

# Garantir que o hist√≥rico de modelos esteja inicializado
initialize_model_history()

# Inicializar vari√°veis de controle no session_state
if 'showing_prediction_section' not in st.session_state:
    st.session_state['showing_prediction_section'] = True

if 'model_switched' not in st.session_state:
    st.session_state['model_switched'] = False

if 'just_updated_page' not in st.session_state:
    st.session_state['just_updated_page'] = False

if st.session_state.get('is_fit') is None:
    st.write("Voc√™ precisa treinar um modelo antes")
    st.write("### Importante! \n As features devem ser *exatamente* as mesmas usadas para treino")
else:
    if st.session_state['is_fit']:
        st.write("# Aplicar score na base de teste")
        
        # Se√ß√£o de Hist√≥rico - antes do upload de arquivo
        st.write("## Hist√≥rico e sele√ß√£o de modelos")
        st.write("Voc√™ pode selecionar um modelo diferente do hist√≥rico para usar nas predi√ß√µes:")
        
        # Layout com tr√™s colunas para os bot√µes de hist√≥rico
        col_hist1, col_hist2, col_hist3 = st.columns([2, 1, 1])
        
        # Bot√£o para mostrar/ocultar o hist√≥rico
        with col_hist1:
            if st.button("üìà Ver Hist√≥rico de Modelos"):
                st.session_state['show_history_test'] = not st.session_state.get('show_history_test', False)
        
        # Bot√£o para atualizar a p√°gina
        with col_hist2:
            if st.button("üîÑ Atualizar P√°gina", type="primary"):
                st.session_state['just_updated_page'] = True
                st.rerun()
        
        # Coluna para sele√ß√£o do modelo (vazia por enquanto)
        with col_hist3:
            pass
        
        # Exibe o hist√≥rico de modelos se o bot√£o foi acionado
        if st.session_state.get('show_history_test', False):
            display_model_history()
        
        # Selecionar modelo do hist√≥rico para usar
        if 'model_history' in st.session_state and len(st.session_state['model_history']) > 0:
            # Preparar op√ß√µes para o selectbox
            model_options = []
            for i, model_record in enumerate(st.session_state['model_history']):
                timestamp = model_record['timestamp']
                model_name = model_record['model_name']
                roc_auc = round(model_record['roc_auc_test'], 4)
                option_text = f"[{i+1}] {model_name} ({timestamp}) - ROC AUC: {roc_auc}"
                model_options.append(option_text)
            
            # Adicionar op√ß√£o para o modelo atual
            model_options.insert(0, "Modelo Atual")
            
            # Se j√° trocamos o modelo, voltar para "Modelo Atual"
            default_index = 0
            if st.session_state.get('model_switched', False):
                default_index = 0  # For√ßar "Modelo Atual" se acabamos de trocar o modelo
            
            # Seletor de modelo
            selected_model = st.selectbox(
                "Selecione o modelo para fazer predi√ß√µes:",
                options=model_options,
                index=default_index  # Use o √≠ndice que determinamos acima
            )
            
            # Limpar a flag ap√≥s us√°-la
            if st.session_state.get('model_switched', False):
                st.session_state['model_switched'] = False
            
            # Ao selecionar um novo modelo, oculte a se√ß√£o de predi√ß√£o
            if selected_model == "Modelo Atual":
                st.session_state['showing_prediction_section'] = True
            else:
                # Se selecionou um modelo do hist√≥rico, ocultamos a se√ß√£o de predi√ß√£o
                st.session_state['showing_prediction_section'] = False
            
            # Mostrar informa√ß√µes sobre o modelo selecionado (seja atual ou hist√≥rico)
            if selected_model == "Modelo Atual":
                # Mostrar informa√ß√µes sobre o modelo atual
                st.info("""
                **Modelo selecionado:** Modelo atual (√∫ltimo treinado)
                """)
                
                # Determinar o tipo do modelo atual
                model_wrapper = st.session_state['model_wrapper']
                if model_wrapper['type'] == 'two_step':
                    if hasattr(model_wrapper['model'], '_final_estimator'):
                        model_name = model_wrapper['model']._final_estimator.__class__.__name__
                    else:
                        model_name = model_wrapper['model'].__class__.__name__
                else:
                    if hasattr(model_wrapper['pipeline'], 'named_steps') and 'model' in model_wrapper['pipeline'].named_steps:
                        model_name = model_wrapper['pipeline'].named_steps['model'].__class__.__name__
                    else:
                        model_name = "Desconhecido"
                
                # Mostrar o tipo do modelo atual
                st.write("## Sobre o modelo atual")
                
                # Mapear o nome t√©cnico do modelo para um nome amig√°vel
                display_name = "Desconhecido"
                if "LogisticRegression" in model_name:
                    display_name = "Regress√£o Log√≠stica"
                elif "LGBMClassifier" in model_name:
                    display_name = "LightGBM"
                elif "Ridge" in model_name or "CalibratedClassifierCV" in model_name:
                    display_name = "Regress√£o Linear"
                elif "XGBClassifier" in model_name:
                    display_name = "XGBoost"
                elif "MLP" in model_name:
                    display_name = "Rede Neural"
                
                st.write(f"### Tipo de modelo: {display_name}")
                
                # Mostrar explica√ß√£o com base no tipo de modelo identificado
                if "LogisticRegression" in model_name:
                    st.markdown("""
                    **Vantagens**: √â um modelo muito r√°pido, que consome poucos recursos computacionais e √© extremamente f√°cil de interpretar. Os coeficientes de cada vari√°vel mostram de forma clara e direta como elas influenciam a previs√£o, o que √© excelente para explicar os resultados e gerar insights de neg√≥cio.

                    **Desvantagens**: Sua principal fraqueza √© a incapacidade de capturar rela√ß√µes complexas e n√£o-lineares nos dados. O modelo assume uma fronteira de decis√£o linear, o que limita seu poder preditivo em problemas mais complexos, onde modelos mais modernos geralmente apresentam performance superior.
                    """)
                elif "LGBMClassifier" in model_name:
                    st.markdown("""
                    ### LightGBM
                    **Vantagens**: Sua maior vantagem √© a velocidade de treinamento e o baixo uso de mem√≥ria. Ele √© significativamente mais r√°pido que seus concorrentes (como o XGBoost) em grandes volumes de dados, permitindo itera√ß√µes e experimentos muito mais √°geis. Mant√©m um alt√≠ssimo poder preditivo.

                    **Desvantagens**: Em datasets pequenos (com poucos milhares de linhas), ele √© mais propenso a overfitting (se ajustar demais aos dados de treino e generalizar mal). A grande quantidade de hiperpar√¢metros, embora flex√≠vel, pode tornar sua otimiza√ß√£o um processo complexo.
                    """)
                elif "Ridge" in model_name or "CalibratedClassifierCV" in model_name:
                    st.markdown("""
                    ### Regress√£o Linear
                    **Vantagens**: √â o modelo mais simples e intuitivo para prever valores num√©ricos cont√≠nuos. √â muito r√°pido para treinar e seus resultados s√£o totalmente interpret√°veis, permitindo entender exatamente quanto cada vari√°vel contribui para a previs√£o final.

                    **Desvantagens**: Sua maior limita√ß√£o √© assumir que a rela√ß√£o entre as vari√°veis √© puramente linear. Ele n√£o consegue modelar curvas ou intera√ß√µes complexas, al√©m de ser muito sens√≠vel a outliers (valores extremos), o que o torna inadequado para a maioria dos problemas do mundo real que buscam m√°xima precis√£o.
                    """)
                elif "XGBClassifier" in model_name:
                    st.markdown("""
                    ### XGBoost (Extreme Gradient Boosting)
                    **Vantagens**: √â famoso por seu alt√≠ssimo poder preditivo e robustez. Frequentemente, √© o modelo que apresenta os melhores resultados em competi√ß√µes de Machine Learning com dados estruturados (tabelas). Possui mecanismos internos de regulariza√ß√£o que ajudam a controlar o overfitting.

                    **Desvantagens**: Seu principal ponto fraco √© o alto custo computacional. Ele tende a ser mais lento para treinar e consumir mais mem√≥ria do que alternativas como o LightGBM. A sintonia fina de seus diversos hiperpar√¢metros tamb√©m pode ser um processo demorado e complexo.
                    """)
                elif "MLP" in model_name:
                    st.markdown("""
                    ### Rede Neural
                    **Vantagens**: Tem uma capacidade incompar√°vel de aprender padr√µes muito complexos e n√£o-lineares, sendo o modelo de escolha para dados n√£o estruturados como imagens, √°udio e texto. Quando bem treinada e com dados suficientes, pode atingir o maior poder preditivo entre todos os modelos.

                    **Desvantagens**: S√£o modelos "caixa-preta" (black box), ou seja, √© extremamente dif√≠cil entender o porqu√™ de suas decis√µes. Exigem um volume massivo de dados, alto custo computacional (tempo e hardware potentes) e sua arquitetura e ajuste de hiperpar√¢metros s√£o notoriamente complexos.
                    """)
            elif len(model_options) > 1:
                # O c√≥digo existente para modelos selecionados do hist√≥rico
                # Extrair √≠ndice do modelo selecionado (formato "[X] Nome...")
                model_idx = int(selected_model.split(']')[0].replace('[', '')) - 1
                
                # Carregar o modelo do hist√≥rico
                selected_model_record = st.session_state['model_history'][model_idx]
                
                # Exibir informa√ß√µes do modelo selecionado
                st.info(f"""
                **Modelo selecionado:** {selected_model_record['model_name']}
                **Treinado em:** {selected_model_record['timestamp']}
                **ROC AUC (teste):** {selected_model_record['roc_auc_test']}
                **KS Score (teste):** {selected_model_record['ks_test']}
                """)
                
                # Exibir alerta se as features n√£o corresponderem
                current_features = set(st.session_state['features'])
                historic_features = set(selected_model_record['features_used'])
                if current_features != historic_features:
                    st.warning("""
                    ‚ö†Ô∏è **Aten√ß√£o**: As features deste modelo s√£o diferentes do modelo atual.
                    Certifique-se de que seu arquivo de teste contenha todas as features necess√°rias.
                    """)
                
                # Adicionar explica√ß√µes sobre o modelo selecionado
                st.write("## Sobre o modelo selecionado")
                
                # Determinar o tipo de modelo com base no nome
                model_name = selected_model_record['model_name']
                
                # Mostrar explica√ß√£o com base no nome do modelo
                if "Regress√£o Log√≠stica" in model_name:
                    st.markdown("""
                    ### Regress√£o Log√≠stica
                    **Vantagens**: √â um modelo muito r√°pido, que consome poucos recursos computacionais e √© extremamente f√°cil de interpretar. Os coeficientes de cada vari√°vel mostram de forma clara e direta como elas influenciam a previs√£o, o que √© excelente para explicar os resultados e gerar insights de neg√≥cio.

                    **Desvantagens**: Sua principal fraqueza √© a incapacidade de capturar rela√ß√µes complexas e n√£o-lineares nos dados. O modelo assume uma fronteira de decis√£o linear, o que limita seu poder preditivo em problemas mais complexos, onde modelos mais modernos geralmente apresentam performance superior.
                    """)
                elif "LightGBM" in model_name:
                    st.markdown("""
                    ### LightGBM
                    **Vantagens**: Sua maior vantagem √© a velocidade de treinamento e o baixo uso de mem√≥ria. Ele √© significativamente mais r√°pido que seus concorrentes (como o XGBoost) em grandes volumes de dados, permitindo itera√ß√µes e experimentos muito mais √°geis. Mant√©m um alt√≠ssimo poder preditivo.

                    **Desvantagens**: Em datasets pequenos (com poucos milhares de linhas), ele √© mais propenso a overfitting (se ajustar demais aos dados de treino e generalizar mal). A grande quantidade de hiperpar√¢metros, embora flex√≠vel, pode tornar sua otimiza√ß√£o um processo complexo.
                    """)
                elif "Regress√£o Linear" in model_name:
                    st.markdown("""
                    ### Regress√£o Linear
                    **Vantagens**: √â o modelo mais simples e intuitivo para prever valores num√©ricos cont√≠nuos. √â muito r√°pido para treinar e seus resultados s√£o totalmente interpret√°veis, permitindo entender exatamente quanto cada vari√°vel contribui para a previs√£o final.

                    **Desvantagens**: Sua maior limita√ß√£o √© assumir que a rela√ß√£o entre as vari√°veis √© puramente linear. Ele n√£o consegue modelar curvas ou intera√ß√µes complexas, al√©m de ser muito sens√≠vel a outliers (valores extremos), o que o torna inadequado para a maioria dos problemas do mundo real que buscam m√°xima precis√£o.
                    """)
                elif "XGBoost" in model_name:
                    st.markdown("""
                    ### XGBoost (Extreme Gradient Boosting)
                    **Vantagens**: √â famoso por seu alt√≠ssimo poder preditivo e robustez. Frequentemente, √© o modelo que apresenta os melhores resultados em competi√ß√µes de Machine Learning com dados estruturados (tabelas). Possui mecanismos internos de regulariza√ß√£o que ajudam a controlar o overfitting.

                    **Desvantagens**: Seu principal ponto fraco √© o alto custo computacional. Ele tende a ser mais lento para treinar e consumir mais mem√≥ria do que alternativas como o LightGBM. A sintonia fina de seus diversos hiperpar√¢metros tamb√©m pode ser um processo demorado e complexo.
                    """)
                elif "Rede Neural" in model_name:
                    st.markdown("""
                    ### Rede Neural
                    **Vantagens**: Tem uma capacidade incompar√°vel de aprender padr√µes muito complexos e n√£o-lineares, sendo o modelo de escolha para dados n√£o estruturados como imagens, √°udio e texto. Quando bem treinada e com dados suficientes, pode atingir o maior poder preditivo entre todos os modelos.

                    **Desvantagens**: S√£o modelos "caixa-preta" (black box), ou seja, √© extremamente dif√≠cil entender o porqu√™ de suas decis√µes. Exigem um volume massivo de dados, alto custo computacional (tempo e hardware potentes) e sua arquitetura e ajuste de hiperpar√¢metros s√£o notoriamente complexos.
                    """)

                # Bot√£o para confirmar a troca de modelo
                if st.button("Usar este modelo para predi√ß√µes", type="primary"):
                    if 'model_wrapper' in selected_model_record:
                        # Salvar o modelo selecionado no session state
                        st.session_state['model_wrapper'] = selected_model_record['model_wrapper']
                        st.session_state['features'] = selected_model_record['features_used']
                        
                        # Esta √© a linha mais importante - marcar que o modelo foi trocado 
                        st.session_state['model_switched'] = True
                        
                        # IMPORTANTE: mostrar a se√ß√£o de predi√ß√£o novamente
                        st.session_state['showing_prediction_section'] = True
                        
                        # Garantir que nossas mensagens de depura√ß√£o mostrem as informa√ß√µes corretas
                        st.session_state['selected_model_name'] = selected_model_record['model_name']
                        
                        # Mensagem mais informativa sobre o pr√≥ximo passo
                        st.success(f"""
                        ‚úÖ Modelo {selected_model_record['model_name']} selecionado com sucesso!""")
                    else:
                        st.info("Este modelo foi treinado antes da implementa√ß√£o do armazenamento completo. Por favor, treine este modelo novamente para us√°-lo nas predi√ß√µes.")
        
        st.write("---")
        
        # Verificar se acabou de atualizar a p√°gina ap√≥s trocar o modelo
        if st.session_state.get('just_updated_page', False):
            # Resetar a flag para n√£o exibir sempre
            st.session_state['just_updated_page'] = False
            
            # Exibir instru√ß√µes claras
            if st.session_state.get('selected_model_name'):
                st.info(f"""
                üëá Agora voc√™ pode fazer predi√ß√µes com o modelo: **{st.session_state.get('selected_model_name')}**
                
                Use a √°rea de upload abaixo para carregar seu arquivo de dados.
                """)
        
        # Somente exibir a se√ß√£o de upload e predi√ß√µes se n√£o estamos selecionando modelo
        # ou se j√° confirmamos a sele√ß√£o
        if st.session_state['showing_prediction_section']:
            # Interface para upload do arquivo com os dados de teste
            uploaded_file = st.file_uploader("", type=['xlsx'], accept_multiple_files=False, key="unique_uploader")

            # Salvar o arquivo carregado no session_state para preserv√°-lo ap√≥s recarregamento
            if uploaded_file is not None:
                # Processar o arquivo e salvar no session_state
                df_val = pd.read_excel(uploaded_file)
                st.session_state['test_file'] = df_val
                st.session_state['has_test_file'] = True

            # Processar predi√ß√µes se temos um arquivo carregado (do upload atual ou anterior)
            if st.session_state.get('has_test_file', False):
                model_wrapper = st.session_state['model_wrapper']
                df_val = st.session_state['test_file']

                # Verificar se temos todas as features necess√°rias
                required_features = st.session_state['features']

                # Verificar se as colunas necess√°rias est√£o presentes
                missing_features = [f for f in required_features if f not in df_val.columns]
                if missing_features:
                    st.error(f"‚ö†Ô∏è Faltam as seguintes colunas no arquivo: {', '.join(missing_features)}")
                else:
                    # Selecionar apenas as features necess√°rias na ordem correta
                    X_val = df_val[required_features]

                    # Remove linhas com NaN nas features
                    X_val = X_val.fillna(0)  # Garantir que n√£o haja NaNs

                    df_pred = X_val.copy()

                    # Fazer predi√ß√µes de acordo com o tipo de modelo
                    if model_wrapper['type'] == 'two_step':
                        # Aplicar pr√©-processamento e ent√£o o modelo
                        X_val_processed = model_wrapper['preprocess'].transform(X_val)
                        df_pred['Prediction'] = model_wrapper['model'].predict_proba(X_val_processed)[:,1]
                    else:
                        # Usar o pipeline completo
                        df_pred['Prediction'] = model_wrapper['pipeline'].predict_proba(X_val)[:,1]

                    # Salvar predi√ß√µes no session_state
                    st.session_state['predictions'] = df_pred

                    # Mostrar as predi√ß√µes
                    st.write("### Predi√ß√µes geradas")
                    st.dataframe(df_pred.head(30))

                    # Op√ß√£o para download
                    file_name = st.text_input("Insira o nome que deseja fornecer ao arquivo", "base_scorada")

                    # Bot√£o para download do arquivo com predi√ß√µes
                    excel_data = to_excel(df_pred)
                    st.download_button(
                        label="üì• Download Excel File",
                        data=excel_data,
                        file_name=f"{file_name}.xlsx",
                        mime="application/vnd.ms-excel"
                    )

                    # Limpar a flag de mudan√ßa de modelo
                    if st.session_state.get('model_changed', False):
                        st.session_state['model_changed'] = False
        else:
            # Apenas um espa√ßo ou mensagem indicando o que fazer
            st.info("üëÜ Clique em 'Usar este modelo para predi√ß√µes' para confirmar a escolha ou selecione 'Modelo Atual' para usar o modelo carregado atualmente.")

